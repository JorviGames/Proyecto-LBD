/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Jframes;

import baseDatos.DatabaseConnection;
import codigo.Cliente;
import codigo.Envio;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jorge Alfaro
 */
public class Envios extends javax.swing.JFrame {

    /**
     * Creates new form Envios
     */
    public Envios() {
        initComponents();
        setTitle("Menu Clientes y envios");
        setLocationRelativeTo(null);
        setResizable(false);
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        btnVolverMenu = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        T_envio = new javax.swing.JTable();
        B_editarEnvio = new javax.swing.JButton();
        B_eliminarEnvio = new javax.swing.JButton();
        B_agregarEnvio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Gesti√≥n de Envios");

        btnVolverMenu.setText("Volver Al Menu");
        btnVolverMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverMenuActionPerformed(evt);
            }
        });

        T_envio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "No.Envio", "Direccion"
            }
        ));
        jScrollPane2.setViewportView(T_envio);

        B_editarEnvio.setText("Editar Envio");
        B_editarEnvio.setToolTipText("");
        B_editarEnvio.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        B_editarEnvio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        B_editarEnvio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_editarEnvioActionPerformed(evt);
            }
        });

        B_eliminarEnvio.setText("Eliminar Envio");
        B_eliminarEnvio.setToolTipText("");
        B_eliminarEnvio.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        B_eliminarEnvio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        B_eliminarEnvio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_eliminarEnvioActionPerformed(evt);
            }
        });

        B_agregarEnvio.setText("Agregar Envio");
        B_agregarEnvio.setToolTipText("");
        B_agregarEnvio.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        B_agregarEnvio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        B_agregarEnvio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_agregarEnvioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(B_eliminarEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B_editarEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B_agregarEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVolverMenu)
                        .addGap(150, 150, 150)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnVolverMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(B_editarEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(B_agregarEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addComponent(B_eliminarEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverMenuActionPerformed
        // TODO add your handling code here:
        Menu_Clientes_envio LO = new Menu_Clientes_envio();
        LO.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnVolverMenuActionPerformed

    private void B_editarEnvioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_editarEnvioActionPerformed
        // TODO add your handling code here:
        actualizarEnvio();
    }//GEN-LAST:event_B_editarEnvioActionPerformed

    private void B_eliminarEnvioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_eliminarEnvioActionPerformed
        // TODO add your handling code here:
        eliminarEnvio();
    }//GEN-LAST:event_B_eliminarEnvioActionPerformed

    private void B_agregarEnvioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_agregarEnvioActionPerformed
        // TODO add your handling code here:
        registrarEnvio();
    }//GEN-LAST:event_B_agregarEnvioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Envios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Envios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Envios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Envios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Envios().setVisible(true);
            }
        });
    }

    private void llenarTabla() {
        DatabaseConnection conexion = new DatabaseConnection();
        conexion.conectarJ();
        Envio envios = new Envio(conexion.getConnection());
        DefaultTableModel model = envios.obtenerEnvios();
        T_envio.setModel(model);
    }

    public void registrarEnvio() {

        DatabaseConnection conexion = new DatabaseConnection();
        conexion.conectarJ();
        Envio envio = new Envio(conexion.getConnection());

        Envio cliente = new Envio(conexion.getConnection());
        ArrayList<String> clientesDisponibles = cliente.obtenerClientesDisponibles();

        if (clientesDisponibles.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay clientes disponibles para seleccionar.");
            return;
        }

        String selectedCliente = (String) JOptionPane.showInputDialog(
                this,
                "Seleccione el cliente:",
                "Seleccionar Cliente",
                JOptionPane.PLAIN_MESSAGE,
                null,
                clientesDisponibles.toArray(),
                clientesDisponibles.get(0)
        );

        if (selectedCliente == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente.");
            return;
        }

        String numeroEnvioStr = JOptionPane.showInputDialog(this, "Ingrese el n√∫mero del env√≠o:");
        if (numeroEnvioStr == null || numeroEnvioStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El n√∫mero de env√≠o no puede estar vac√≠o.");
            return;
        }

        String direccion = JOptionPane.showInputDialog(this, "Ingrese la direcci√≥n del env√≠o:");
        if (direccion == null || direccion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La direcci√≥n no puede estar vac√≠a.");
            return;
        }

        int numeroEnvio;
        try {
            numeroEnvio = Integer.parseInt(numeroEnvioStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El n√∫mero de env√≠o debe ser un n√∫mero.");
            return;
        }

        int codCliente = cliente.obtenerCodigoCliente(selectedCliente);

        if (codCliente == -1) {
            JOptionPane.showMessageDialog(this, "El cliente no existe.");
            return;
        }

        boolean success = envio.registrarEnvio(numeroEnvio, direccion, codCliente);

        if (success) {
            JOptionPane.showMessageDialog(this, "Env√≠o registrado exitosamente.");

            envio.llenar(T_envio);
        } else {
            JOptionPane.showMessageDialog(this, "Error al registrar el env√≠o.");
        }
    }

public void actualizarEnvio() {
    int selectedRow = T_envio.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione un env√≠o de la tabla para actualizar.");
        return;
    }

    try {
        String numeroEnvioStr = T_envio.getValueAt(selectedRow, 0).toString();
        String direccionActual = T_envio.getValueAt(selectedRow, 1).toString();

        int numeroEnvio = Integer.parseInt(numeroEnvioStr);

        String nuevaDireccion = JOptionPane.showInputDialog(this, "Ingrese la nueva direcci√≥n del env√≠o:", direccionActual);
        if (nuevaDireccion == null || nuevaDireccion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La direcci√≥n no puede estar vac√≠a.");
            return;
        }

        DatabaseConnection conexion = new DatabaseConnection();
        conexion.conectarJ();
        Envio envio = new Envio(conexion.getConnection());
        boolean success = envio.actualizarEnvio(numeroEnvio, nuevaDireccion);

        if (success) {
            JOptionPane.showMessageDialog(this, "Env√≠o actualizado exitosamente.");
            envio.llenar(T_envio);
        } else {
            JOptionPane.showMessageDialog(this, "Error al actualizar el env√≠o.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Error al convertir los valores seleccionados: " + e.getMessage());
    } catch (ClassCastException e) {
        JOptionPane.showMessageDialog(this, "Error en el tipo de datos seleccionado: " + e.getMessage());
    }
}

public void eliminarEnvio() {
    int selectedRow = T_envio.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione un env√≠o de la tabla para eliminar.");
        return;
    }

    try {
        String numeroEnvioStr = T_envio.getValueAt(selectedRow, 0).toString();

        int numeroEnvio = Integer.parseInt(numeroEnvioStr);

        DatabaseConnection conexion = new DatabaseConnection();
        conexion.conectarJ();
        Envio envio = new Envio(conexion.getConnection());
        boolean success = envio.eliminarEnvio(numeroEnvio);

        if (success) {
            JOptionPane.showMessageDialog(this, "Env√≠o eliminado exitosamente.");
            envio.llenar(T_envio);
        } else {
            JOptionPane.showMessageDialog(this, "Error al eliminar el env√≠o.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Error al convertir los valores seleccionados: " + e.getMessage());
    } catch (ClassCastException e) {
        JOptionPane.showMessageDialog(this, "Error en el tipo de datos seleccionado: " + e.getMessage());
    }
}







    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_agregarEnvio;
    private javax.swing.JButton B_editarEnvio;
    private javax.swing.JButton B_eliminarEnvio;
    private javax.swing.JTable T_envio;
    private javax.swing.JButton btnVolverMenu;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
