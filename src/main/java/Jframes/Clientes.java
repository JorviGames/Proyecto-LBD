/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Jframes;

import baseDatos.DatabaseConnection;
import codigo.Cliente;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jorge Alfaro
 */
public class Clientes extends javax.swing.JFrame {

    /**
     * Creates new form Clientes
     */
    public Clientes() {
        initComponents();
        setTitle("Menu Clientes y envios");
        setLocationRelativeTo(null);
        setResizable(false);
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        B_agregarDP = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        T_Sucu = new javax.swing.JTable();
        B_Editar = new javax.swing.JButton();
        B_Eliminar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnVolverMenu = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        T_cliente = new javax.swing.JTable();
        B_editarCliente = new javax.swing.JButton();
        B_eliminarCliente = new javax.swing.JButton();
        B_agregarCliente2 = new javax.swing.JButton();

        jFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jFrame1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jFrame1.setResizable(false);

        B_agregarDP.setText("Agregar Departamento");
        B_agregarDP.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        B_agregarDP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        B_agregarDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_agregarDPActionPerformed(evt);
            }
        });

        jButton1.setText("Volver Al Menu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        T_Sucu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Correo", "Telefono", "Direccion"
            }
        ));
        jScrollPane1.setViewportView(T_Sucu);

        B_Editar.setText("Editar Departamento");
        B_Editar.setToolTipText("");
        B_Editar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        B_Editar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        B_Editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_EditarActionPerformed(evt);
            }
        });

        B_Eliminar.setText("Eliminar Departamento");
        B_Eliminar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        B_Eliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        B_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_EliminarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Gestión de Departamentos");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(237, 237, 237)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(B_agregarDP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B_Editar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B_Eliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(136, 136, 136))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGap(59, 59, 59)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addComponent(B_agregarDP, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(B_Editar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(B_Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnVolverMenu.setText("Volver Al Menu");
        btnVolverMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverMenuActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Gestión de Clientes");

        T_cliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Cod.Cliente", "Nombre", "Primer Apellido", "Segundo Apellido", "Numero", "Correo", "No.Factura", "No.Transaccion"
            }
        ));
        jScrollPane2.setViewportView(T_cliente);

        B_editarCliente.setText("Editar Cliente");
        B_editarCliente.setToolTipText("");
        B_editarCliente.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        B_editarCliente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        B_editarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_editarClienteActionPerformed(evt);
            }
        });

        B_eliminarCliente.setText("Eliminar Cliente");
        B_eliminarCliente.setToolTipText("");
        B_eliminarCliente.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        B_eliminarCliente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        B_eliminarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_eliminarClienteActionPerformed(evt);
            }
        });

        B_agregarCliente2.setText("Agregar Cliente");
        B_agregarCliente2.setToolTipText("");
        B_agregarCliente2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        B_agregarCliente2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        B_agregarCliente2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_agregarCliente2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(B_editarCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B_eliminarCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B_agregarCliente2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVolverMenu)
                        .addGap(269, 269, 269)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnVolverMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(B_agregarCliente2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(B_editarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(B_eliminarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void B_agregarDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_agregarDPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_B_agregarDPActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Menu menu = new Menu();

        menu.setVisible(true);

        setVisible(false);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void B_EditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_EditarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_B_EditarActionPerformed

    private void B_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_EliminarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_B_EliminarActionPerformed

    private void btnVolverMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverMenuActionPerformed
        // TODO add your handling code here:
        Menu_Clientes_envio LO = new Menu_Clientes_envio();
        LO.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnVolverMenuActionPerformed

    private void B_editarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_editarClienteActionPerformed
        // TODO add your handling code here:
        editarCliente();
    }//GEN-LAST:event_B_editarClienteActionPerformed

    private void B_eliminarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_eliminarClienteActionPerformed
        // TODO add your handling code here:
        eliminarCliente();
    }//GEN-LAST:event_B_eliminarClienteActionPerformed

    private void B_agregarCliente2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_agregarCliente2ActionPerformed
        // TODO add your handling code here:
        agregarCliente();

    }//GEN-LAST:event_B_agregarCliente2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Clientes().setVisible(true);
            }
        });
    }

    public void llenarTabla() {
        DatabaseConnection conexion = new DatabaseConnection();
        conexion.conectarJ();

        Cliente cliente = new Cliente(conexion.getConnection());
        DefaultTableModel model = cliente.ObtenerClientes();

        if (model.getRowCount() > 0) {
            T_cliente.setModel(model);
            System.out.println("Datos añadidos a la tabla.");
        } else {
            System.out.println("No se encontraron datos para mostrar.");
        }
    }

    public void agregarCliente() {
        String codClienteStr = JOptionPane.showInputDialog(this, "Ingrese el código del cliente:");
        if (codClienteStr == null || codClienteStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El código de cliente no puede estar vacío.");
            return;
        }

        String nombre = JOptionPane.showInputDialog(this, "Ingrese el nombre del cliente:");
        if (nombre == null || nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre no puede estar vacío.");
            return;
        }

        String primerApellido = JOptionPane.showInputDialog(this, "Ingrese el primer apellido:");
        if (primerApellido == null || primerApellido.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El primer apellido no puede estar vacío.");
            return;
        }

        String segundoApellido = JOptionPane.showInputDialog(this, "Ingrese el segundo apellido:");
        if (segundoApellido == null || segundoApellido.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El segundo apellido no puede estar vacío.");
            return;
        }

        String numero = JOptionPane.showInputDialog(this, "Ingrese el número de teléfono:");
        if (numero == null || numero.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El número de teléfono no puede estar vacío.");
            return;
        }

        String correo = JOptionPane.showInputDialog(this, "Ingrese el correo:");
        if (correo == null || correo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El correo no puede estar vacío.");
            return;
        }

        // Obtener la lista de números de factura y transacción disponibles
        DatabaseConnection conexion = new DatabaseConnection();
        conexion.conectarJ();
        Cliente cliente = new Cliente(conexion.getConnection());
        ArrayList<Integer> facturasDisponibles = cliente.obtenerFacturasDisponibles();
        ArrayList<Integer> transaccionesDisponibles = cliente.obtenerTransaccionesDisponibles();

        if (facturasDisponibles.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay facturas disponibles para seleccionar.");
            return;
        }

        if (transaccionesDisponibles.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay transacciones disponibles para seleccionar.");
            return;
        }

        // Mostrar un JComboBox con las facturas disponibles
        Integer selectedFactura = (Integer) JOptionPane.showInputDialog(
                this,
                "Seleccione el número de factura:",
                "Seleccionar Factura",
                JOptionPane.PLAIN_MESSAGE,
                null,
                facturasDisponibles.toArray(),
                facturasDisponibles.get(0)
        );

        if (selectedFactura == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un número de factura.");
            return;
        }

        // Mostrar un JComboBox con las transacciones disponibles
        Integer selectedTransaccion = (Integer) JOptionPane.showInputDialog(
                this,
                "Seleccione el número de transacción:",
                "Seleccionar Transacción",
                JOptionPane.PLAIN_MESSAGE,
                null,
                transaccionesDisponibles.toArray(),
                transaccionesDisponibles.get(0)
        );

        if (selectedTransaccion == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un número de transacción.");
            return;
        }

        // Lógica para agregar un cliente
        int codCliente;
        try {
            codCliente = Integer.parseInt(codClienteStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El código de cliente debe ser un número.");
            return;
        }

        // Llamar al método para agregar el cliente
        boolean success = cliente.AgregarCliente(codCliente, nombre, primerApellido, segundoApellido, numero, correo, selectedFactura, selectedTransaccion);

        if (success) {
            JOptionPane.showMessageDialog(this, "Cliente agregado exitosamente.");

            // Actualizar la tabla de clientes
            cliente.llenar(T_cliente);
        } else {
            JOptionPane.showMessageDialog(this, "Error al agregar el cliente.");
        }
    }

    private void editarCliente() {
        int selectedRow = T_cliente.getSelectedRow();
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) T_cliente.getModel();
            int codCliente = (int) model.getValueAt(selectedRow, 0);
            String nombre = (String) model.getValueAt(selectedRow, 1);
            String primerApellido = (String) model.getValueAt(selectedRow, 2);
            String segundoApellido = (String) model.getValueAt(selectedRow, 3);
            String numero = (String) model.getValueAt(selectedRow, 4);
            String correo = (String) model.getValueAt(selectedRow, 5);
            int numeroFactura = (int) model.getValueAt(selectedRow, 6);
            int numTransaccion = (int) model.getValueAt(selectedRow, 7);

            boolean continuar = true;
            while (continuar) {
                String[] options = {
                    "Nombre", "Primer Apellido", "Segundo Apellido",
                    "Número", "Correo", "Número de Factura",
                    "Número de Transacción", "Cancelar"
                };
                int choice = JOptionPane.showOptionDialog(this,
                        "¿Qué campo desea actualizar?",
                        "Seleccionar Campo",
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.INFORMATION_MESSAGE,
                        null,
                        options,
                        options[0]);

                switch (choice) {
                    case 0:
                        nombre = JOptionPane.showInputDialog(this, "Nombre:", nombre);
                        break;
                    case 1:
                        primerApellido = JOptionPane.showInputDialog(this, "Primer Apellido:", primerApellido);
                        break;
                    case 2:
                        segundoApellido = JOptionPane.showInputDialog(this, "Segundo Apellido:", segundoApellido);
                        break;
                    case 3:
                        numero = JOptionPane.showInputDialog(this, "Número:", numero);
                        break;
                    case 4:
                        correo = JOptionPane.showInputDialog(this, "Correo:", correo);
                        break;
                    case 5:
                        DatabaseConnection conexion = new DatabaseConnection();
                        conexion.conectarJ();
                        List<Integer> facturasDisponibles = new Cliente(conexion.getConnection()).obtenerFacturasDisponibles();
                        Integer selectedFactura = (Integer) JOptionPane.showInputDialog(
                                this,
                                "Seleccione el número de factura:",
                                "Seleccionar Factura",
                                JOptionPane.PLAIN_MESSAGE,
                                null,
                                facturasDisponibles.toArray(),
                                facturasDisponibles.get(0)
                        );

                        if (selectedFactura == null) {
                            JOptionPane.showMessageDialog(this, "Debe seleccionar un número de factura.");
                            return;
                        }
                        numeroFactura = selectedFactura;
                        break;
                    case 6:
                        DatabaseConnection conexio = new DatabaseConnection();
                        conexio.conectarJ();
                        List<Integer> transaccionesDisponibles = new Cliente(conexio.getConnection()).obtenerTransaccionesDisponibles();
                        Integer selectedTransaccion = (Integer) JOptionPane.showInputDialog(
                                this,
                                "Seleccione el número de transacción:",
                                "Seleccionar Transacción",
                                JOptionPane.PLAIN_MESSAGE,
                                null,
                                transaccionesDisponibles.toArray(),
                                transaccionesDisponibles.get(0)
                        );

                        if (selectedTransaccion == null) {
                            JOptionPane.showMessageDialog(this, "Debe seleccionar un número de transacción.");
                            return;
                        }
                        numTransaccion = selectedTransaccion;
                        break;
                    case 7:
                        continuar = false;
                        break;
                    default:
                        continuar = false;
                        break;
                }

                if (choice != 7 && choice != JOptionPane.CLOSED_OPTION) {
                    int more = JOptionPane.showConfirmDialog(this, "¿Desea actualizar otro campo?", "Continuar", JOptionPane.YES_NO_OPTION);
                    continuar = (more == JOptionPane.YES_OPTION);
                } else {
                    continuar = false;
                }
            }

            // Actualizar la base de datos
            DatabaseConnection conexion = new DatabaseConnection();
            conexion.conectarJ();
            Cliente clienteDAO = new Cliente(conexion.getConnection());
            clienteDAO.actualizarCliente(codCliente, nombre, primerApellido, segundoApellido, numero, correo, numeroFactura, numTransaccion);
            conexion.desconectar();

            // Volver a llenar la tabla con los datos actualizados
            llenarTabla();
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un cliente para editar.");
        }
    }
    
    private void eliminarCliente() {
    int selectedRow = T_cliente.getSelectedRow();
    if (selectedRow >= 0) {
        DefaultTableModel model = (DefaultTableModel) T_cliente.getModel();
        int codCliente = (int) model.getValueAt(selectedRow, 0);

        int confirm = JOptionPane.showConfirmDialog(this, 
            "¿Está seguro de que desea eliminar el cliente seleccionado?", 
            "Confirmar Eliminación", 
            JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            DatabaseConnection conexion = new DatabaseConnection();
            conexion.conectarJ();
            Cliente clienteDAO = new Cliente(conexion.getConnection());
            clienteDAO.eliminarCliente(codCliente);
            conexion.desconectar();

            // Actualizar la tabla después de la eliminación
            llenarTabla(); // Asegúrate de que este método recargue los datos de la tabla desde la base de datos
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un cliente para eliminar.");
    }
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_Editar;
    private javax.swing.JButton B_Eliminar;
    private javax.swing.JButton B_agregarCliente2;
    private javax.swing.JButton B_agregarDP;
    private javax.swing.JButton B_editarCliente;
    private javax.swing.JButton B_eliminarCliente;
    private javax.swing.JTable T_Sucu;
    private javax.swing.JTable T_cliente;
    private javax.swing.JButton btnVolverMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
